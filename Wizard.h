/*
     8888888b.                  888     888 d8b
     888   Y88b                 888     888 Y8P
     888    888                 888     888
     888   d88P 888d888  .d88b. Y88b   d88P 888  .d88b.  888  888  888
     8888888P"  888P"   d88""88b Y88b d88P  888 d8P  Y8b 888  888  888
     888        888     888  888  Y88o88P   888 88888888 888  888  888
     888        888     Y88..88P   Y888P    888 Y8b.     Y88b 888 d88P
     888        888      "Y88P"     Y8P     888  "Y8888   "Y8888888P"


             PE Editor & Dissasembler & File Identifier
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
 Written by Shany Golan.
 In januar, 2003.
 I have investigated P.E. file format as thoroughly as possible,
 But I cannot claim that I am an expert yet, so some of its information  
 May give you wrong results.

 Language used: Visual C++ 6.0
 Date of creation: July 06, 2002

 Date of first release: unknown ??, 2003

 You can contact me: e-mail address: Shanytc@yahoo.com

 Copyright (C) 2011. By Shany Golan.

 Permission is granted to make and distribute verbatim copies of this
 Program provided the copyright notice and this permission notice are
 Preserved on all copies.


 File: Wizard.h 
   This program was written by Shany Golan, Student at :
                    Ruppin, department of computer science and engineering University.
*/


//////////////////////////////////////////////////////////////////////////
//							INCLUDES									//
//////////////////////////////////////////////////////////////////////////

#include <windows.h>
#include <commctrl.h>
#include <shlobj.h>
#include "x64.h"
#include "resource\resource.h"
#include "CDisasmData.h"

// STL Includes
#include <vector>
#include <map>

using namespace std;  // Use MicroSoft STL Templates..


//Memory Model
#define TINY		0x41 //0100 0001
#define MEDIUM		0x42 //0100 0010
#define COMPACT		0x43 //0100 0011
#define SMALL		0x44 //0100 0100
#define LARGE		0x45 //0100 0101
#define HUGE		0x46 //0100 0110
#define FLAT		0x47 //0100 0111

// Calling Convertions
#define SYSCALL		0x81 //1000 0001 
#define C_CALL		0x82 //1000 0010 
#define PASCAL_C	0x83 //1000 0011 
#define STDCALL		0x84 //1000 0100 
#define FORTRAN		0x85 //1000 0101 
#define BASIC		0x86 //1000 0110 

#define HEADER_TAG "; ###############################################################################"
#define REL_TAG    "; # This file has generated by Proview Disassembler (PVDasm) MASM wizard."
#define REL_TAG2   "; # Copyright (c) 2003-2024 by Shany Golan"

// ================================================================
// =========================  STRUCT  =============================
// ================================================================
typedef struct CodeSection{
    DWORD_PTR Start;
    DWORD_PTR End;
    DWORD_PTR Index;
    char* Proc;
    char* Proto;
    char* Endp;
}CODE_SECTION;

typedef struct WizardOptions{
    DWORD_PTR Machine;
    DWORD_PTR CaseMap;
    DWORD_PTR Model;
    BYTE Directive;
    // 0,0,1-nolist,1-nolistmacro,1-mmx,1-nolistif,1-list,1-lall
    UINT Convertion; 
    char* EntryName;
    bool Libs,Include,SavedOptions,AddComments;
}WIZARD_OPTIONS;

typedef struct Build{
    DWORD_PTR Index;
    char SourceCode[128];
}WIZARD_BUILD;

// ================================================================
// ======================  TYPE DEFINES  ==========================
// ================================================================

typedef multimap<const int, char*>		DataMapTree;
typedef pair<const int, char*>			DataMapTreeAdd;
typedef vector<int>						DisasmImportsArray;
typedef vector<CODE_SECTION>			CodeSectionArray;
typedef vector<CDisasmData>				DisasmDataArray;
typedef vector<WIZARD_BUILD>			WizardList;
typedef multimap<const int, int>		XRef,MapTree;

typedef WizardList::iterator			WizardListItr;
typedef CodeSectionArray::iterator		CodeSectionItr;
typedef MapTree::iterator				TreeMapItr;
typedef DisasmImportsArray::iterator	ItrImports;
typedef DataMapTree::iterator			ItrDataMap;
typedef XRef :: iterator				ItrXref;

// ================================================================
// =========================  PROTOTYPES  =========================
// ================================================================

void LoadOptions		( HWND hWnd							);
void MakePreview		( HWND hWnd							);
void BuildSourceCode	(									);
void FixJump			( char* Instruction,bool fixation	);
void AddType			( HWND hWnd							);

LRESULT ProcessWizardCustomDraw (LPARAM lParam);

BOOL CALLBACK WizardDlgProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK WizardDataDlgProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK WizardCodeDlgProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK WizardHeaderDlgProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK WizardPreviewDlgProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);